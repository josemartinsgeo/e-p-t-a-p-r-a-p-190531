{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","arruamento","numeroPolicia","numeroProcessoTemporario","numeroProcessoNovo","imprimindo","impressaoErro","impressaoUrl","handleArruamento","bind","assertThisInitialized","handleNumeroPolicia","handleNumeroProcessoTemporario","handleNumeroProcessoNovo","handleGeocode","handleSubmit","handlePrint","window","addEventListener","onMessage","evt","console","log","concat","JSON","stringify","data","target","setState","toLowerCase","url","error","event","value","payload","document","getElementById","contentWindow","postMessage","preventDefault","_this2","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","iframe","width","height","id","display","position","scrolling","disabled","onClick","handleProcessId","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24bfdf77.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Iframe from 'react-iframe';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends Component {\n\n  componentDidMount() {\n    window.addEventListener('message', this.onMessage.bind(this));\n  }\n\n  onMessage (evt) {\n    console.log(`-------react app message received-------`);\n    console.log(`${JSON.stringify(evt.data, true, 2)}`);\n    console.log(`----------------------------------------`);\n\n    if (evt.data && (evt.data.target === 'onPrintSuccess' || evt.data.target === 'onPrintError')) {\n      this.setState({imprimindo: 0})\n    }\n    if (evt.data && evt.data.target) {\n      switch (evt.data.target.toLowerCase()) {\n        case \"onprintsuccess\":\n        this.setState({imprimindo: false, impressaoUrl: evt.data.url})\n        break;\n        case \"onprinterror\":\n        this.setState({imprimindo: false, impressaoErro: evt.data.error})\n        break;\n        default:\n        break;\n      }\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      arruamento : \"\",\n      numeroPolicia : \"\",\n      numeroProcessoTemporario : \"\",\n      numeroProcessoNovo: \"\",\n      imprimindo: false,\n      impressaoErro: null,\n      impressaoUrl: null\n    };\n\n    this.handleArruamento = this.handleArruamento.bind(this);\n    this.handleNumeroPolicia = this.handleNumeroPolicia.bind(this);\n    this.handleNumeroProcessoTemporario = this.handleNumeroProcessoTemporario.bind(this);\n    this.handleNumeroProcessoNovo = this.handleNumeroProcessoNovo.bind(this);\n    this.handleGeocode = this.handleGeocode.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handlePrint = this.handlePrint.bind(this);\n  }\n\n  handleArruamento(event) {\n    this.setState({\n      arruamento: event.target.value\n    });\n  }\n\n  handleNumeroPolicia(event) {\n    this.setState({\n      numeroPolicia: event.target.value\n    });\n  }\n\n  handleNumeroProcessoTemporario(event) {\n    this.setState({\n      numeroProcessoTemporario: event.target.value\n    });\n  }\n\n  handleNumeroProcessoNovo(event) {\n    this.setState({\n      numeroProcessoNovo: event.target.value\n    });\n  }\n\n  handleGeocode (event) {\n    let payload = {\n      target : 'onGeocode',\n      state : {\n        arruamento: this.state.arruamento,\n        numeroPolicia: this.state.numeroPolicia\n      }\n    }\n    console.log(`----react app send message to iframe----`);\n    console.log(JSON.stringify(payload, true, 2));\n    console.log(`----------------------------------------`);\n    document.getElementById(\"iframe\").contentWindow.postMessage(payload, \"*\");\n    event.preventDefault();\n  }\n\n  handleProcessId (event) {\n    let payload = {\n      target : 'onProcessId',\n      state : {\n        numeroProcessoTemporario : this.state.numeroProcessoTemporario,\n        numeroProcessoNovo : this.state.numeroProcessoNovo,\n      }\n    }\n    console.log(`----react app send message to iframe----`);\n    console.log(JSON.stringify(payload, true, 2));\n    console.log(`----------------------------------------`);\n    document.getElementById(\"iframe\").contentWindow.postMessage(payload, \"*\");\n    event.preventDefault();\n  }\n\n  handleSubmit(event) {\n    let payload = {\n      target : 'onSubmit'\n    }\n    console.log(`----react app send message to iframe----`);\n    console.log(JSON.stringify(payload, true, 2));\n    console.log(`----------------------------------------`);\n    document.getElementById(\"iframe\").contentWindow.postMessage(payload, \"*\");\n    event.preventDefault();\n  }\n\n  handlePrint(event) {\n    let payload = {\n      target: 'onPrint',\n    }\n    console.log(`----react app send message to iframe----`);\n    console.log(JSON.stringify(payload, true, 2));\n    console.log(`----------------------------------------`);\n    document.getElementById(\"iframe\").contentWindow.postMessage(payload, \"*\");\n    this.setState({imprimindo: true})\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className=\"container\">\n\n          <h1 className=\"display-7\">ÁGUAS DO PORTO</h1>\n          <hr/>\n          {/*}<p className=\"lead\">POC (Proof of concept) desenvolvida com o objetivo de validar o funcionamento de um <strong>Esri Map</strong> em uma aplicação desenvolvida em <strong>ReactJS.</strong> Os dados utilizados nessa POC são provenientes de Layers de teste (exemplos para desenvolvimento), porém cumprem o objetivo que é validar o fluxo dos dados entre o <strong>IFrame</strong> contendo o <strong>Esri Map</strong> e o app <strong>ReactJS.</strong></p>\n          <hr className=\"my-4\"/>*/}\n\n          <div className=\"row justify-content-md-center\">\n            <div className=\"col col-lg-8\">\n              <form onSubmit={this.handleGeocode}>\n                <div className=\"form-group row\">\n                  <div className=\"col-sm-6\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Digite o arruamento para posicionar o mapa...\" value={this.state.arruamento} onChange={this.handleArruamento}/>\n                  </div>\n                  <div className=\"col-sm-3\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Nº Policia\" value={this.state.numeroPolicia} onChange={this.handleNumeroPolicia}/>\n                  </div>\n                  <div className=\"col-sm-3\">\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Pesquisar</button>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n\n        <Iframe\n          url=\"/esri_pt_iframe/index.html\"\n          width=\"800\"\n          height=\"520px\"\n          id=\"iframe\"\n          display=\"initial\"\n          position=\"relative\"\n          scrolling=\"no\"\n          />\n\n          <div className=\"row justify-content-md-center\">\n\n            <div className=\"col col-lg-8\">\n              <div className=\"form-group row\">\n                <div className=\"col-sm-6\">\n                  <form onSubmit={this.handleSubmit}>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submeter</button>\n                  </form>\n                </div>\n                <div className=\"col-sm-6\">\n                  {/** Botão de impressão - desabilitado enquanto a página imprime */}\n                  <form onSubmit={this.handlePrint}>\n                      <button disabled={this.state.imprimindo} type=\"submit\" className=\"btn btn-secondary btn-block\">\n                        {this.state.imprimindo ? 'Imprimindo...' : \"Imprimir\"}\n                      </button>\n                  </form>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"col col-lg-8\">\n              <div className=\"form-group row\">\n                <div className=\"col-sm-3\">\n                  <input type=\"text\" className=\"form-control\" placeholder=\"ID Temporário\" value={this.state.numeroProcessoTemporario} onChange={this.handleNumeroProcessoTemporario}/>\n                </div>\n                <div className=\"col-sm-3\">\n                  <input type=\"text\" className=\"form-control\" placeholder=\"ID Novo\" value={this.state.numeroProcessoNovo} onChange={this.handleNumeroProcessoNovo}/>\n                </div>\n                <div className=\"col-sm-6\">\n                  <button onClick={(evt) => this.handleProcessId(evt)} className=\"btn btn-secondary btn-block\">Enviar ID do Processo</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}